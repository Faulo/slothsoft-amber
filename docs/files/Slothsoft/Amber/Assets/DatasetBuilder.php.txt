<?php
declare(strict_types = 1);
namespace Slothsoft\Amber\Assets;

use Slothsoft\Amber\Controller\EditorController;
use Slothsoft\Amber\ParameterFilters\ResourceParameterFilter;
use Slothsoft\Core\ServerEnvironment;
use Slothsoft\Core\IO\FileInfoFactory;
use Slothsoft\Core\IO\Writable\ChunkWriterInterface;
use Slothsoft\Core\IO\Writable\Decorators\ChunkWriterFileCache;
use Slothsoft\Core\IO\Writable\Delegates\ChunkWriterFromChunkWriterDelegate;
use Slothsoft\Farah\FarahUrl\FarahUrlArguments;
use Slothsoft\Farah\Module\Asset\AssetInterface;
use Slothsoft\Farah\Module\Asset\ExecutableBuilderStrategy\ExecutableBuilderStrategyInterface;
use Slothsoft\Farah\Module\Executable\ExecutableStrategies;
use Slothsoft\Farah\Module\Executable\ResultBuilderStrategy\ChunkWriterResultBuilder;
use Slothsoft\Savegame\Editor;
use SplFileInfo;

class DatasetBuilder implements ExecutableBuilderStrategyInterface
{
    public function buildExecutableStrategies(AssetInterface $context, FarahUrlArguments $args): ExecutableStrategies
    {
        $game = $args->get(ResourceParameterFilter::PARAM_GAME);
        $version = $args->get(ResourceParameterFilter::PARAM_VERSION);
        $user = $args->get(ResourceParameterFilter::PARAM_USER);
        $infosetId = $args->get(ResourceParameterFilter::PARAM_INFOSET_ID);
        
        $cacheFile = [];
        $cacheFile[] = ServerEnvironment::getCacheDirectory();
        $cacheFile[] = 'slothsoft/amber';
        $cacheFile[] = $game;
        $cacheFile[] = $version;
        $cacheFile[] = 'dataset';
        $cacheFile[] = "$infosetId.xml";
        $cacheFile = implode(DIRECTORY_SEPARATOR, $cacheFile);
        $cacheFile = FileInfoFactory::createFromPath($cacheFile);
        
        $controller = new EditorController();
        $config = $controller->createEditorConfig($game, $version, $user, $infosetId);
        
        $chunkDelegate = function() use($config) : ChunkWriterInterface {
            $editor = new Editor($config);
            $editor->loadAllArchives();
            $node = $editor->getSavegameNode();
            return $node->getChunkWriter();
        };
        
        $shouldRefreshDelegate = function(SplFileInfo $cacheFile) use($config) : bool {
            return $config->infosetFile->getMTime() > $cacheFile->getMTime();
        };
        
        $writer = new ChunkWriterFromChunkWriterDelegate($chunkDelegate);
        $writer = new ChunkWriterFileCache($writer, $cacheFile, $shouldRefreshDelegate);
        $resultBuilder = new ChunkWriterResultBuilder($writer, $cacheFile->getFilename());
        return new ExecutableStrategies($resultBuilder);
    }
}


